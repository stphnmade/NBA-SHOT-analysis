---
title: "When Did NBA Shooting Change?"
subtitle: "A scrollytelling deep dive into threes, midrange, and efficiency"
author: "Stphn"
format:
  html:
    theme: cosmo
    toc: false
    smooth-scroll: true
execute:
  echo: false
  warning: false
  message: false
---

```{r}
# --- Libraries & helpers ---
library(tidyverse)
library(lubridate)
library(janitor)
library(ggplot2)

# Load data (saved earlier as RDS)
shots <- readRDS("data/nba_shots.rds") |>
  clean_names()

# --- Derive season label ---
has_season_cols <- all(c("season_1","season_2") %in% names(shots))
if (has_season_cols) {
  shots <- shots |>
    mutate(season = paste0(season_1, "-", season_2))
} else {
  shots <- shots |>
    mutate(game_date = mdy(game_date)) |>
    mutate(year = year(game_date),
           month = month(game_date),
           season_start = if_else(month >= 10, year, year - 1),
           season = paste0(season_start, "-", substr(season_start + 1, 3, 4)))
}

shots <- shots |>
  mutate(
    shot_type = toupper(as.character(shot_type)),
    shot_made = as.logical(shot_made),
    basic_zone = as.character(basic_zone),
    zone_range = as.character(zone_range)
  )

# --- Season aggregates ---
season_summ <- shots |>
  group_by(season) |>
  summarise(
    fga = n(),
    fgm = sum(shot_made, na.rm = TRUE),
    fga_3 = sum(shot_type == "3PT", na.rm = TRUE),
    fgm_3 = sum(shot_type == "3PT" & shot_made, na.rm = TRUE),
    share_mid = mean(basic_zone == "Midrange", na.rm = TRUE),
    share_ra  = mean(basic_zone == "Restricted Area", na.rm = TRUE),
    share_paint = mean(basic_zone == "In the Paint (non-RA)", na.rm = TRUE),
    share_c3 = mean(basic_zone %in% c("Left Corner 3","Right Corner 3"), na.rm = TRUE),
    share_atb = mean(basic_zone == "Above the Break", na.rm = TRUE),
    med_dist = median(shot_distance, na.rm = TRUE),
    .groups = "drop"
  ) |>
  mutate(
    three_rate = fga_3 / fga,
    efg = (fgm + 0.5 * fgm_3) / fga
  ) |>
  arrange(season)

# helper for x-axis ticks
season_order  <- season_summ$season
season_breaks <- season_order[seq(1, length(season_order), length.out = min(10, length(season_order)))] |> unique()
